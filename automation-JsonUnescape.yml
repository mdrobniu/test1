args:
- description: JSON object
  name: value
comment: Recursively un-escapes JSON data if escaped JSON is found
commonfields:
  id: JsonUnescape
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.0.0
    itemVersion: 1.19.74
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
dockerimage: demisto/python3-deb:3.12.10.3561556
enabled: true
engineinfo: {}
mainengineinfo: {}
name: JsonUnescape
outputs:
- contextPath: JsonUnescape
  description: Unescaped JSON Data
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('JsonUnescape', 'start', __line__())
  CONSTANT_PACK_VERSION = '1.19.74'
  demisto.debug('pack id = CommonScripts, pack version = 1.19.74')
  import json
  import traceback





  def hook(obj: dict) -> dict:
      """Hook to convert string to json if possible"""
      new_obj = {}
      for k, v in obj.items():
          try:
              new_obj[k] = json.loads(v)
          except Exception:
              new_obj[k] = v
      return new_obj


  def unescape(args: dict) -> dict | list:
      """Unescape json string"""
      json_str = json.dumps(args.get("value"))
      return json.loads(json_str, object_hook=hook)


  def main():  # pragma: no cover  # noqa: F841
      args = demisto.args()
      try:
          return_results(unescape(args))
      except Exception as ex:
          demisto.error(traceback.format_exc())
          return_error(f"Error: {ex!s}")


  if __name__ in ("__main__", "__builtin__", "builtins"):
      main()

  register_module_line('JsonUnescape', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- transformer
type: python
