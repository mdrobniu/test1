args:
- description: The entry ID of the PDF file.
  name: EntryID
  required: true
comment: Checks whether the PDF file is encrypted.
commonfields:
  id: IsPDFFileEncrypted
  version: -1
contentitemexportablefields:
  contentitemfields:
    definitionid: ""
    fromServerVersion: 6.5.0
    itemVersion: 1.19.74
    packID: CommonScripts
    packName: Common Scripts
    packPropagationLabels:
    - all
    prevname: ""
    propagationLabels: []
    toServerVersion: ""
deprecated: true
dockerimage: demisto/readpdf:1.0.0.2034953
enabled: true
engineinfo: {}
mainengineinfo: {}
name: IsPDFFileEncrypted
pswd: ""
runas: DBotWeakRole
runonce: false
script: |
  register_module_line('IsPDFFileEncrypted', 'start', __line__())
  CONSTANT_PACK_VERSION = '1.19.74'
  demisto.debug('pack id = CommonScripts, pack version = 1.19.74')

  import PyPDF2



  def is_pdf_encrypted(file_path: str) -> bool:
      demisto.debug("Trying to open file")
      with open(file_path, "rb") as f:
          reader = PyPDF2.PdfReader(f)
          demisto.debug("Opened file, retuning if it's encrypted.")
          return reader.is_encrypted


  def main():  # pragma: no cover
      args = demisto.args()
      entry_id = args.get("EntryID")
      file_path = demisto.getFilePath(entry_id).get("path")
      if not file_path:
          raise DemistoException("File not found. Please enter a valid entry ID.")
      try:
          demisto.debug("Checking if file is encrypted")
          return_results("yes" if is_pdf_encrypted(file_path) else "no")
      except Exception as e:
          demisto.error(traceback.format_exc())
          return_error("An error occurred, Verify the PDF file is readable. Error: " + str(e))


  if __name__ in ["__main__", "__builtin__", "builtins"]:
      main()

  register_module_line('IsPDFFileEncrypted', 'end', __line__())
scripttarget: 0
subtype: python3
system: true
tags:
- Utility
- Condition
type: python
